$form-checkbox-mark-size: 1rem;
$form-checkbox-mark-border-radius: $border-radius;
$form-checkbox-mark-border: 1px solid var(--hdd-color-dynamic-primary);

.hdd-form_checkbox {
  // Variable containing '&' to jump to current parent inside a child class.
  $this: &;

  display: flex;
  align-items: center;
  cursor: pointer;
  &:not(:last-child) {
    margin-bottom: 0.75rem;
  }

  // Creating placeholder to inject style into checkbox mutations.
  // We have to seperate the checkbox marked styling because of the checked state
  %checkbox-mark {
    position: relative;
    background: var(--hdd-color-dynamic-primary);
    &::before {
      @extend .fal, .fa-check, :before;
      
      top: -1px;
      left: 50%;
      transform: translateX(-50%);

      color: var(--hdd-color-white);
      font-size: 0.75rem;
    }
  }

  &.is-checked {
    #{$this}_mark {
      @extend %checkbox-mark;
    }
  }

  &.is-invalid {
    input:checked ~ #{$this}_mark,
    #{$this}_mark {
      border-color: var(--hdd-color-signal-red);

      &::before {
        color: var(--hdd-color-signal-red);
      }
    }
  }

  // Need to hide the original checkbox
  input {
    display: none;

    &:checked ~ #{$this}_mark {
      @extend %checkbox-mark;
    }
  }

  .hdd-badge {
    margin-left: 0.5rem;
    float: right;
  }

  &_mark {
    display: inline-block;

    min-width: $form-checkbox-mark-size;
    min-height: $form-checkbox-mark-size;
    max-width: $form-checkbox-mark-size;
    max-height: $form-checkbox-mark-size;
    transition: background 0.3s $transition-cubic;
    border: $form-checkbox-mark-border;
    border-radius: $form-checkbox-mark-border-radius;
    background: var(--hdd-color-dynamic-background-secondary);
  }

  &_label {
    flex-grow: 1;
    margin-left: 1rem;
  }
}
