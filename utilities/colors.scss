@import '../variables/colors';

/**
 * Generates the is-$color classes that can be included on components to make them available for users.
 * A list of colors, either by name or label, or a map f.eks. $data-colors can be sent to this function.
 */
@mixin color-modifiers($list: ('primary', 'warn', 'danger', 'safe'), $main-property: 'background', $contrast-property: '', $selector: '', $color-set: $all-colors) {
  @if(type-of($list) == 'map') {
    @if($list == $all-colors) {
      $list: map-keys($list);
      $label-list: ('primary', 'warn', 'danger', 'safe');
      $list: join($list, $label-list);
    } @else {
      $list: map-keys($list);
    }
  }

  @each $label in $list {
    $map: color-map($label, $color-set);

    &.is-#{$label}#{$selector} {
      #{$main-property}: map-get($map, color);

      @if $contrast-property {
        #{$contrast-property}: map-get($map, contrast);
      }
    }
  }
}

// Making CSS-variables for all colors and contrast-colors
@each $label, $map in $all-colors {
  $color: color($label);
  $contrast: map-get($map, contrast);
  $dark-theme: map-get($map, dark-theme);

  $alt-labels: map-get($map, alt-labels);
  $labels: ($label);

  @if $alt-labels {
    @each $label in $alt-labels {
      $labels: append($labels, $label);
    }
  }

  @each $label in $labels {
    :root {
      --hdd-color-#{$label}: #{$color};
      --hdd-color-contrast-#{$label}: #{$contrast};
      --hdd-color-dynamic-#{$label}: #{$color};
      // Dark-theme standard colors
      @include is-dark-theme() {
        --hdd-color-dynamic-#{$label}: #{$dark-theme};
      }
    }
  }
}
